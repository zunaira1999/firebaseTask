//import liraries
import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet, TouchableOpacity, TextInput, Image, Platform, Alert, StatusBar, ScrollView, FlatList } from 'react-native';
import auth from '@react-native-firebase/auth';
import storage from '@react-native-firebase/storage';

import database from '@react-native-firebase/database';

// import Photo from './src/assets/images/im.jpj'

import ImagePicker from 'react-native-image-crop-picker';

import FlashMessage from "react-native-flash-message";
import { showMessage, hideMessage } from "react-native-flash-message";
import FireStore from './src/screens/FireStore';

// create a component
function Dummy() {

    const [email, setEmail] = useState('')
    const [password, setPassword] = useState('')
    const [inputTextValue, setInputTExtValue] = useState(null)
    const [list, setList] = useState('item')
    const [isUpdate, setIsUpdate] = useState(false)
    const [selectedCardIndex, setSelectedCardIndex] = useState(null)

    const [initializing, setInitializing] = useState(true);
    const [user, setUser] = useState();
    const [confirm, setConfirm] = useState(null);
    const [code, setCode] = useState('')

    const [image, setImage] = useState(null)
    const [uploading, setUploading] = useState(false)
    const [transferred, setTransferred] = useState(null)
    const [myData, setMyData] = useState(null)

    // phone authentication

    async function signInWithPhoneNumber(phoneNumber) {
        const confirmation = await auth().signInWithPhoneNumber(phoneNumber);
        setConfirm(confirmation);
    }

    async function confirmCode() {
        try {
            await confirm.confirm(code);
        } catch (error) {
            console.log('Invalid code.');
        }
    }



    useEffect(() => {
        getDatabase();
    }, [])

    const getDatabase = async () => {
        try {
            // const data = await database().ref('todo').once('value');
            const data = await database().ref('todo').on("value", tempData => {

                setList(tempData.val());
                console.log(data)
            })

        } catch (e) {
            console.log(e)
        }
    }

    const submit = (email, password) => {

        console.log(email, password)


        auth()
            .createUserWithEmailAndPassword(email, password)
            .then(() => {
                console.log('User account created & signed in!');
            })
            .catch(error => {
                console.error(error);
            });

    }



    const takePhotoFromCamera = () => {
        ImagePicker.openCamera({
            width: 300,
            height: 400,
            cropping: true,
        }).then(image => {
            console.log(image);
            const imagUri = Platform.OS === 'ios' ? image.sourceURL : image.path
            setImage(imagUri)
        });
    }

    const choosePhotoFromLibrary = () => {
        ImagePicker.openPicker({
            width: 300,
            height: 400,
            cropping: true
        }).then(image => {
            console.log(image);
            const imagUri = Platform.OS === 'ios' ? image.sourceURL : image.path
            setImage(imagUri)
            console.log(imagUri)
        });
    }

    const submitPost = async () => {
        const uploadUri = image;
        let filename = uploadUri.substring(uploadUri.lastIndexOf('/') + 1)

        setUploading(true)

        try {
            await storage().ref(filename).putFile(uploadUri)
            setUploading(false)
            Alert.alert(
                'Image Uploaded',
                'Your image has been uploaded to the firebase cloud storage Successfully!'
            )
        } catch (e) {
            console.log(e)
        }

        setImage(null)

    }

    const handleAddData = async () => {
        if (inputTextValue.length > 0) {
            try {
                const index = list.length;
                const response = await database().ref(`todo/${index}`).set({
                    value: inputTextValue

                })
                setInputTExtValue('')
                console.log(response)
            } catch (err) {
                console.log(err)
            }
        } else {
            showMessage({
                message: "Please Enter Value!",
                type: "danger",
            });
        }

    }

    const handleUpdateData = async () => {
        if (inputTextValue.length > 0) {
            try {
                const response = await database().ref(`todo/${selectedCardIndex}`).update({
                    value: inputTextValue
                })

                console.log(response)
                setInputTExtValue('')
                setIsUpdate(false)

            } catch (error) {
                console.log(error)
            }
        } else {
            showMessage({
                message: "Please Enter Value!",
                // description: "My message description",
                type: "danger",

            });
        }
    }


    const handleCardPress = (cardIndex, cardValue) => {
        try {
            setIsUpdate(true)
            setSelectedCardIndex(cardIndex)
            setInputTExtValue(cardValue)
        } catch (error) {
            console.log(error)
        }
    }

    const handleCardLongPress = (cardIndex, cardValue) => {
        try {
            Alert.alert('Alert', `Are You Sure To Delete ${cardValue}`, [
                {
                    text: 'Cancel',
                    onPress: () => {
                        console.log('Cancel is press')
                    }
                },
                {
                    text: 'Yes',
                    onPress: async () => {
                        try {
                            const response = await database().ref(`todo/${cardIndex}`).remove()

                            setInputTExtValue('')
                            setIsUpdate(false)
                            console.log(response)
                        } catch (error) {
                            console.log(error)
                        }
                    }
                },

            ])

        } catch (error) {
            console.log(error)
        }
    }


    return (
        <View style={styles.container}>
            {/* <ScrollView> */}
            <StatusBar hidden={true} />
            <FlashMessage position="top" />
            <Text style={styles.text}>ToDo App </Text>

            <TextInput style={styles.inputText}
                value={inputTextValue}
                onChangeText={text => setInputTExtValue(text)}
                placeholder={'Enter Any Value'}
                placeholderTextColor={'gray'}
            // secureTextEntry={true}
            />

            {
                !isUpdate ? <TouchableOpacity
                    onPress={() => handleAddData()}
                    style={styles.button}>
                    <Text style={styles.btnText}>Add</Text>
                </TouchableOpacity>
                    :
                    <TouchableOpacity
                        onPress={() => handleUpdateData()}
                        style={styles.button}>
                        <Text style={styles.btnText}>UpDate</Text>
                    </TouchableOpacity>
            }

            <View style={styles.cardContainer}>
                <Text style={{
                    color: 'gray',
                    fontSize: 20,
                    fontWeight: 'bold',
                    paddingHorizontal: 10
                }}>ToDo List</Text>

                <FlatList data={list}
                    renderItem={item => {
                        const cardIndex = item.index
                        if (item.item !== null) {
                            return <TouchableOpacity
                                onPress={() => handleCardPress(cardIndex, item.item.value)}
                                onLongPress={() => handleCardLongPress(cardIndex, item.item.value)}
                                style={styles.card}>
                                <Text style={{ color: 'white', fontSize: 16 }}>
                                    {item.item.value}
                                </Text>

                            </TouchableOpacity>
                        }

                    }}

                />


            </View>

            <ScrollView>
                {
                    image !== null ? <Image style={{
                        height: 150,
                        // width:150,
                        resizeMode: 'center',
                        marginTop: 10,
                    }} source={{
                        uri: image
                    }} />
                        : null
                }






                <TouchableOpacity
                    onPress={takePhotoFromCamera}
                    style={styles.button}>
                    <Text style={styles.btnText}>photo From Camera</Text>
                </TouchableOpacity>

                <TouchableOpacity
                    onPress={choosePhotoFromLibrary}
                    style={styles.button}>
                    <Text style={styles.btnText}>Choose Photo from Gallery</Text>
                </TouchableOpacity>

                <TouchableOpacity
                    onPress={submitPost}
                    // onPress={()=> submit(email,password)}
                    style={styles.button}>
                    <Text style={styles.btnText}>submit Post</Text>
                </TouchableOpacity>

                <TouchableOpacity
                    onPress={() => signInWithPhoneNumber('+92 3061402407')}
                    // onPress={()=> submit(email,password)}
                    style={styles.button}>
                    <Text style={styles.btnText}>Phone Number</Text>
                </TouchableOpacity>








            </ScrollView>





            {/* <FireStore /> */}



        </View>
    );
};

// define your styles
const styles = StyleSheet.create({
    container: {
        flex: 1,
        paddingTop: 25,
        backgroundColor: 'white',
    },
    text: {
        fontSize: 20,
        color: 'red',
        alignSelf: 'center',
        fontWeight: 'bold'
    },
    inputText: {
        borderWidth: 1,
        marginHorizontal: 10,
        color: 'gray',
        paddingHorizontal: 10,
        fontSize: 16
    },
    button: {
        backgroundColor: 'pink',
        marginTop: 20,
        marginHorizontal: 30,
        // marginBottom:10,
        height: 40,
        borderRadius: 10,
        alignItems: 'center',
        justifyContent: 'center'
    },
    btnText: {
        fontSize: 18,
        color: 'red',
        fontWeight: 'bold'
    },
    cardContainer: {
        marginVertical: 20,
        height: 250,
        paddingHorizontal: 10

    },
    card: {
        backgroundColor: 'lightgray',
        width: '100%',
        padding: 20,
        borderRadius: 20,
        alignItems: 'center',
        marginVertical: 10,
        // marginHorizontal:10
    }
});

//make this component available to the app
export default Dummy;